#!/usr/bin/env ruby -w

require 'English'
require 'fileutils'

if __FILE__ == $PROGRAM_NAME
	FileUtils.mkdir_p('build')
	FileUtils.cp_r('choices', 'build')
	FileUtils.rm_r('choices')
	FileUtils.mv('_mvn', '.mvn')

	choices = {
		:readmeext => '{{readmeext}}{{^readmeext}}.rst{{/readmeext}}',
		:license => '{{license}}{{^license}}Apache-2.0{{/license}}',
		:buildtool => '{{buildtool}}{{^buildtool}}maven{{/buildtool}}',
		:testfrwk => '{{testfrwk}}{{^testfrwk}}junit{{/testfrwk}}',
		:executable => '{{executable}}{{^executable}}no{{/executable}}',
		:ffilib => '{{ffilib}}{{^ffilib}}none{{/ffilib}}'
		}
	nesteddirs = "{{nesteddirs}}{{^nesteddirs}}intro_jvm/util{{/nesteddirs}}"

	FileUtils.cp("build/choices/readme/README#{choices[:readmeext]}",
		"README#{choices[:readmeext]}")
	if File.exist?('build/choices/_parent_readme')
		FileUtils.cp("build/choices/_parent_readme/README#{choices[:readmeext]}",
			"build/choices/_parent_init/README#{choices[:readmeext]}")
	end

	if ['Apache-2.0', 'MIT', 'BSD-3-Clause', 'GPL-3.0+', 'ISC', 'Unlicense'
			].include?(choices[:license])
		FileUtils.cp("build/choices/license/LICENSE_#{choices[:license]}", 'LICENSE')
	end

	if File.exist?('build/choices/build_tool') and ['gradle', 'maven', 'ant', 'sbt', 'rake', 'make'].include?(
            choices[:buildtool])
		FileUtils.cp_r("build/choices/build_tool/#{choices[:buildtool]}/.", '.')
	elsif File.exist?('build/choices/build_tool') # default: gradle
		FileUtils.cp_r('build/choices/build_tool/gradle/.', '.')
	end

	if File.exist?('build/choices/testfrwk') and ['scalatest', 'junit', 'testng'].include?(
			choices[:testfrwk])
		FileUtils.cp_r("build/choices/testfrwk/#{choices[:testfrwk]}/.",
			"src/test/scala/#{nesteddirs}/")
	elsif File.exist?('build/choices/testfrwk') # default: scalatest
		FileUtils.cp_r('build/choices/testfrwk/scalatest/.',
			"src/test/scala/#{nesteddirs}/")
	end

	if File.exist?("src/main/java/#{nesteddirs}") and not 'yes' == choices[:executable]
		Dir["src/main/*/#{nesteddirs}/Main.*"].each{|p| FileUtils.rm(p)}
	end

	if File.exist?('build/choices/ffi_lib') and ['jna', 'swig'].include?(choices[:ffilib])
		FileUtils.cp_r("build/choices/ffi_lib/#{choices[:ffilib]}/.", "src/main/scala/#{nesteddirs}/")
	end

	if File.exist?('../_templates') and File.directory?('../_templates')
		skeletondir = "{{skeletondir}}{{^skeletondir}}#{ENV['HOME']}/Templates/mustache/skeleton-jvm{{/skeletondir}}"
		skel_pardir = File.dirname(skeletondir)

		FileUtils.mkdir_p('../_templates/mustache')
		(Dir["#{skel_pardir}/render_mustache.*"]+[skeletondir]).each{|src|
			FileUtils.cp_r(src, '../_templates/mustache/')}
	end
end
