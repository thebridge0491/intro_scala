/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/current/userguide/java_library_plugin.html
 */

buildscript {
	repositories {
		mavenLocal()
		if (!gradle.startParameter.offline) {
			mavenCentral()
			//jcenter()
		}
	}
}

plugins {
  id 'maven'			// add support to deploy (Maven repos) artifacts
  //id 'groovy'			// extend Java plugin with Groovy support
  id 'scala'			// extend Java plugin with Scala support
  id 'distribution'	// add support to archive (tar, zip) distribution
}

description = 'FFI sub-package for Scala Intro examples project.'
//gradle.startParameter.offline = true

//org.apache.tools.ant.DirectoryScanner.removeDefaultExclude('**/.gitignore')
//org.apache.tools.ant.DirectoryScanner.removeDefaultExclude('**/.hgignore')

group = 'org.sandbox'
version = '0.1.0'

//sourceCompatibility = javacSource
//targetCompatibility = javacTarget

ext['scala.compat'] = System.properties['scala.compat'] ?: '2.13'
ext {
  ld_path = [System.env.LD_LIBRARY_PATH ?: '.',
    System.getProperty('java.library.path', '.')].join(':')
  defaultJvmArgs = ['-esa', '-ea', '-Xmx1024m', '-Xms16m', '-Xss16m']
  pkgname = "${project.group}.${project.name.replaceAll('-', '.')}"
                                              // -PtestOpts=-h,s
  //toptslist = Eval.me(testOpts).flatten()	// -PtestOpts="['-h', '-s']"
  toptslist = '' == testOpts ? [] : testOpts.split(',').flatten()
  argslist = appArgs.split(',').flatten()
}

ant.lifecycleLogLevel = 'INFO'
ant.properties['java.lib'] = System.env.OSTYPE.grep(~/^(?i)linux.*/) ?
  '/usr/share/java' : '/usr/local/share/java/classes'
ant.properties['scala.lib'] = System.env.OSTYPE.grep(~/^(?i)linux.*/) ?
  '/usr/share/scala' : '/usr/local/share/scala/lib'

configurations {
	testOutput.extendsFrom (testCompile)
  checkstyle // with plugin: id 'checkstyle'
  codenarc // with plugin: id 'codenarc'
  scalastyle // with plugin: id 'scalastyle'
  jacoco // with plugin: id 'jacoco'
}

sourceSets {
	main {
		scala { srcDirs = ['src/main/java', 'src/main/scala'] }
		java { srcDirs = [] /*['src/main/java']*/ }
	}
	test {
		scala { srcDirs = ['src/test/java', 'src/test/scala']
			//exclude '**/ClassicTest.*'
		}
		java { srcDirs = [] /*['src/test/java']*/
			//exclude '**/ClassicTest.*'
		}
	}
}

repositories {		// You can declare any Maven/Ivy/file repository here.
  flatDir { dirs "${rootDir}/lib" /*,ant.properties['java.lib'],
    ant.properties['scala.lib']*/  }
	mavenLocal()    // maven {url "${System.env.HOME}/.m2/repository"}
	if (!gradle.startParameter.offline) {
		mavenCentral()  // maven {url 'https://repo.maven.apache.org/maven2'}
		//jcenter()       // maven {url 'https://jcenter.bintray.com'}
	}
	ivy {
    url "${System.env.HOME}/.ivy2/cache"
    layout 'pattern', {
		  //artifact IVY_ARTIFACT_PATTERN
		  artifact '[organisation]/[module]/[type]s/[artifact](-[revision])(-[classifier]).[ext]'
		  ivy '[organisation]/[module]/ivy-[revision].xml'
    }
    //url "${System.env.HOME}/.ivy2/local"
    //layout 'ivy'
	}
}

dependencies {
	// import BOM
	implementation platform('org.sandbox:intro_scala-bom:0')

	implementation "org.scala-lang:scala-library"
  //implementation fileTree(dir: ant.properties['scala.lib'], includes: ['scala-library.jar'])
	testImplementation "org.scalacheck:scalacheck_${project['scala.compat']}"
	testImplementation "org.scalatest:scalatest_${project['scala.compat']}"

	//testImplementation 'junit:junit'
  //testImplementation fileTree(dir: ant.properties['java.lib'], includes: ['hamcrest-core.jar', 'junit.jar'])
  //testImplementation 'org.testng:testng'
  //testImplementation 'org.spockframework:spock-core'

	//implementation 'org.slf4j:slf4j-api'

	//implementation 'org.ini4j:ini4j'
  implementation 'net.java.dev.jna:jna'

  //testRuntimeOnly 'org.slf4j:log4j-over-slf4j'
  //testRuntimeOnly 'ch.qos.logback:logback-classic'
  //testRuntimeOnly "org.scala-lang.modules:scala-xml_${project['scala.compat']}:[1.2,)"

  jacoco 'org.jacoco:org.jacoco.ant:[0.8.5,)'
  //jacoco fileTree(dir: "${System.env.HOME}/.ant/lib", includes: ['org.jacoco.ant*.jar', 'asm-*.jar'])
  checkstyle 'com.puppycrawl.tools:checkstyle:8.33'
  //checkstyle fileTree(dir: ant.properties['java.lib'], includes: ['checkstyle*.jar'])
  //codenarc 'org.codenarc:CodeNarc:[1.6,)'
  //codenarc fileTree(dir: ant.properties['java.lib'], includes: ['CodeNarc*.jar'])
  scalastyle "com.beautiful-scala:scalastyle_${project['scala.compat']}:1.4.0"
  //scalastyle fileTree(dir: "${System.env.HOME}/javalib", includes: ['scalastyle*.jar', 'scalariform*.jar', 'config*.jar', 'scala-*.jar'])
  //zinc "org.scala-sbt:zinc_${project['scala.compat']}:[1.3.5,)"

  testImplementation 'org.sandbox:intro_scala-util:[0.1.0,)'
}

tasks.withType(ScalaCompile) {
  if ('1' == DEBUG) {
    options.compilerArgs += ['-g']    // << '-g' OR += ['-g']
    scalaCompileOptions.additionalParameters = ['-g:vars']
  } else {
    scalaCompileOptions.additionalParameters = ['-optimise']
  }
  options.compilerArgs += ['-Xlint:all', '-deprecation']
  scalaCompileOptions.additionalParameters += ['-deprecation', '-unchecked',
    '-feature']
  //scalaCompileOptions.force = false
	//scalaCompileOptions.forkOptions.jvmArgs = ['-XX:MaxPermSize=1024m']
	//scalaClasspath = fileTree(dir: ant.properties['scala.lib'])
	//zincClasspath = fileTree(dir: ant.properties['scala.lib'])
  //configurations.zinc.transitive = true
}

/*tasks.withType(GroovyCompile) {
  if ('1' == DEBUG) {
      options.compilerArgs += ['-g']    // << '-g' OR += ['-g']
  }
  options.compilerArgs += ['-Xlint:all', '-deprecation']
}*/

tasks.withType(JavaCompile) {
  if ('1' == DEBUG) {
    options.compilerArgs += ['-g']    // << '-g' OR += ['-g']
  }
  options.compilerArgs += ['-Xlint:all', '-deprecation']
}

tasks.withType(JavaExec) {
	enableAssertions = true
}

test { ignoreFailures true
	description description + " [-PtestOpts='${testOpts}']"
	environment 'LD_LIBRARY_PATH', ld_path
  systemProperties(System.getProperties())
  allJvmArgs = defaultJvmArgs
  testLogging.showStandardStreams = true
  //includes = (toptslist.collect { it.replace('.', '/') + '.class' })
  setTestNameIncludePatterns(toptslist)
  exclude '**/Ts_*.class'
	outputs.upToDateWhen { false }
}

//useTestNG()

assemble {
  description description + " [-PDEBUG='${DEBUG}']"
}

clean {
	FileTree tree = fileTree('.').include('*.log')
	delete tree
}

tasks.withType(Jar) {
	duplicatesStrategy 'exclude'
  doFirst {
    manifest {
      attributes(
        'Build-Jdk': System.properties['java.version'],
        'Created-By': 'Gradle ' + gradle.gradleVersion,
        'Built-By': '',
        'Package': project.pkgname,
        'Implementation-Title': project.name,
        'Implementation-Vendor-Id': project.group,
        'Implementation-Version': project.version
      )
    }
  }
}

tasks.withType(Tar) {
	description description + " [-Ptarext='${tarext}']"
	switch (tarext) {
		case 'tar': compression = Compression.NONE ; extension = 'tar'
			break
		case 'tar.bz2': compression = Compression.BZIP2 ; extension = 'tar.bz2'
			break
		default: compression = Compression.GZIP ; extension = 'tar.gz'
			break
	}
}

assembleDist {
	description description + " [-Ptarext='${tarext}']"
}

jar {
	//if ((new File('exclude.lst')).exists()) {
	//	from('.') { exclude (new File('exclude.lst') as String[])
	//		exclude '**/build/*', '**/gradle/*' }
	//	exclude '**/*.jar', '**/.gradle/', '**/build/*', '**/gradle/*'
	//} else {
	//	//from sourceSets.main.allSource
	//	from('.') { include '**/*.gradle', '**/src/', '**/*.properties' }
	//	exclude '**/*.jar', '**/.gradle/', '**/build/*', '**/gradle/*'
	//}

	doFirst {
		manifest {
			def mfClasspath = configurations.runtimeClasspath.collect {
				'lib/' + it.getName()}.join(' ')
			attributes 'Class-Path': mfClasspath
		}
	}
}

//scaladoc {
  /*scalaClasspath = files(
    "${ant.properties['scala.lib']}/scala-library.jar",
		"${ant.properties['scala.lib']}/scala-compiler.jar",
		"${ant.properties['scala.lib']}/scala-reflect.jar")*/
  //scalaClasspath = fileTree(ant.properties['scala.lib']).include('*.jar')
//}

artifacts.archives(tasks.jar)
distTar.classifier = 'project'
distZip.classifier = 'project'

distributions {
	ant.defaultexcludes remove: '**/.hgignore'
	ant.defaultexcludes remove: '**/.gitignore'
	main { baseName = project.name
		if ((new File('exclude.lst')).exists()) {
		  contents {
			  //from('.') { include '**/*.gradle', '**/src/', '**/*.properties' }
			  from('.') { exclude (new File('exclude.lst') as String[])
				  exclude '**/build/*', '**/gradle/*' }
			  exclude '**/*.jar', '**/.gradle/', '**/build/*', '**/gradle/*'
		  }
		} else {
		  contents {
			  from('.') { include '**/*.gradle', '**/src/', '**/*.properties' }
			  exclude '**/*.jar', '**/.gradle/', '**/build/*', '**/gradle/*'
		  }
		}
	}
}


if ((new File("${projectDir}/build-targets.gradle")).exists()) {
	//apply from: "${projectDir}/depnmgr-ivy.gradle"
	apply from: "${projectDir}/build-targets.gradle"

	jar.dependsOn([copyDepns])
	artifacts.archives(tasks.jarTests) //, tasks.jarSources, tasks.jarJavadoc)
}

task auxffi(type: Exec) { workingDir projectDir ; ignoreExitValue true
	description "Compile FFI auxiliary products [-Pprefix='${prefix}']"
	environment PREFIX:prefix, CC:'cc'
	def make_cmd = System.env.OSTYPE.grep(~/^(?i)linux.*/) ? 'make' : 'gmake'
	commandLine "${make_cmd} -B -f Makefile-auxffi.mk auxffi".split()
}
assemble.dependsOn auxffi
