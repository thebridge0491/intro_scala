#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
buildscript {
  repositories {
    mavenLocal()
    if (!gradle.startParameter.offline) {
      mavenCentral()
    }
  }
}

plugins {
  id 'maven-publish'   // add support to deploy (Maven repos) artifacts
  id 'java'
}

group = '${groupId}'
version = '0'

ext {
  proc_output = { cmdLn, dirFile = null ->
    def errbuf = new StringBuffer()
    def proc = cmdLn.execute(null, dirFile)
    //proc.consumeProcessErrorStream(errbuf) ; println errbuf.toString()
    return proc.text
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      /*groupId = project.group
      artifactId = project.name
      version = project.version*/

      //from components.java

      pom.withXml { provider ->
        def builder = provider.asString()
        builder.length = 0 // delete previous content
        builder << project.file("${symbol_dollar}{buildDir}/bom.pom").getText("utf-8")
      }
    }
  }
}

generatePomFileForMavenPublication.doFirst {
  copy { into buildDir ; from "${symbol_dollar}{projectDir}/pom.xml" ; rename { 'bom.pom' } }
}

publishToMavenLocal.doLast {
  def dirPath = java.nio.file.Paths.get("${symbol_dollar}{System.getProperty('user.home')}",
    ".m2/repository/${symbol_dollar}{project.group.replace('.', '/')}/${symbol_dollar}{project.name}/${symbol_dollar}{project.version}")
  //println proc_output("ls -ahl", dirPath.toFile())
  dirPath.toFile().eachFile() { if (it =~ /\.pom$/) { println it } }
}
//task install { dependsOn publishToMavenLocal }
task('install', dependsOn: [publishToMavenLocal]) { group = 'Publishing'
  description '(alias: publishToMavenLocal) ' + publishToMavenLocal.description
}

artifacts.archives(file("${symbol_dollar}{buildDir}/bom.pom"))
